// <auto-generated />
using Assignment2.BottomLayerPersistenceLogic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Assignment2.Migrations
{
    [DbContext(typeof(StudentHelperContext))]
    [Migration("20200325143829_RebuildDBCauseOfError")]
    partial class RebuildDBCauseOfError
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Assignment2.TopLayer.Domain.Assignment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CourseID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherAUID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("TeacherAUID");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.Course", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AssignmentID")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.Exercise", b =>
                {
                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<long>("Lecture")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelpWhere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherAUID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Number", "Lecture");

                    b.HasIndex("TeacherAUID");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.Student", b =>
                {
                    b.Property<string>("AUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AUID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.StudentAssignment", b =>
                {
                    b.Property<string>("StudentAUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("AssignmentID")
                        .HasColumnType("bigint");

                    b.HasKey("StudentAUID", "AssignmentID");

                    b.HasIndex("AssignmentID");

                    b.ToTable("StudentAssignments");
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.StudentCourse", b =>
                {
                    b.Property<string>("StudentAUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("CourseID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("Semester")
                        .HasColumnType("bigint");

                    b.HasKey("StudentAUID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.StudentExercise", b =>
                {
                    b.Property<string>("StudentAUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ExerciseLecture")
                        .HasColumnType("bigint");

                    b.Property<long>("ExerciseNumber")
                        .HasColumnType("bigint");

                    b.HasKey("StudentAUID", "ExerciseLecture", "ExerciseNumber");

                    b.HasIndex("ExerciseLecture", "ExerciseNumber");

                    b.ToTable("StudentExercises");
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.Teacher", b =>
                {
                    b.Property<string>("AUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AUID");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.TeacherCourse", b =>
                {
                    b.Property<string>("TeacherAUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("CourseID")
                        .HasColumnType("bigint");

                    b.HasKey("TeacherAUID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("TeacherCourses");
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.Assignment", b =>
                {
                    b.HasOne("Assignment2.TopLayer.Domain.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment2.TopLayer.Domain.Teacher", "Teacher")
                        .WithMany("Assignments")
                        .HasForeignKey("TeacherAUID");
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.Exercise", b =>
                {
                    b.HasOne("Assignment2.TopLayer.Domain.Teacher", "Teacher")
                        .WithMany("Exercises")
                        .HasForeignKey("TeacherAUID");
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.StudentAssignment", b =>
                {
                    b.HasOne("Assignment2.TopLayer.Domain.Assignment", "Assignment")
                        .WithMany("StudentAssignment")
                        .HasForeignKey("AssignmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment2.TopLayer.Domain.Student", "Student")
                        .WithMany("StudentAssignments")
                        .HasForeignKey("StudentAUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.StudentCourse", b =>
                {
                    b.HasOne("Assignment2.TopLayer.Domain.Course", "Course")
                        .WithMany("StudentsAttending")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment2.TopLayer.Domain.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentAUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.StudentExercise", b =>
                {
                    b.HasOne("Assignment2.TopLayer.Domain.Student", "Student")
                        .WithMany("StudentExercises")
                        .HasForeignKey("StudentAUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment2.TopLayer.Domain.Exercise", "Exercise")
                        .WithMany("StudentExercises")
                        .HasForeignKey("ExerciseLecture", "ExerciseNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assignment2.TopLayer.Domain.TeacherCourse", b =>
                {
                    b.HasOne("Assignment2.TopLayer.Domain.Course", "Course")
                        .WithMany("TeachersResponsible")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment2.TopLayer.Domain.Teacher", "Teacher")
                        .WithMany("ResponsibleForTheseCourses")
                        .HasForeignKey("TeacherAUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
